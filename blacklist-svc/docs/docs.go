// Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "Paul Mkvts"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/token": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "Получение токена авторизации Bearer. Требуется Basic authorization для выполнения метода.",
                "tags": [
                    "auth"
                ],
                "summary": "Get Bearer authorization token (need Basic Authorization first!)",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/dto.Token"
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/blacklist": {
            "get": {
                "description": "Поиск пользователя в черном списке по user_name или phone_number (требуется только один параметр)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "blacklist"
                ],
                "summary": "Get black list by username or phone_number",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Get by username only",
                        "name": "user_name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Get by phone number only",
                        "name": "phone_number",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "Bearer \u003cAdd access token here\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.BlacklistData"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/blacklist/": {
            "post": {
                "description": "Добавление пользователя в черный список",
                "tags": [
                    "blacklist"
                ],
                "summary": "Create user in blacklist",
                "parameters": [
                    {
                        "description": "Create body",
                        "name": "reqeust",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.BlacklistRequestDto"
                        }
                    },
                    {
                        "type": "string",
                        "default": "Bearer \u003cAdd access token here\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/dto.ResponseId"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/blacklist/{id}": {
            "delete": {
                "description": "Удаление пользователя из черного списка",
                "tags": [
                    "blacklist"
                ],
                "summary": "Get black list by user's phone",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Delete by id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "Bearer \u003cAdd access token here\u003e",
                        "description": "Insert your access token",
                        "name": "Authorization",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.BlacklistRequestDto": {
            "type": "object",
            "required": [
                "ban_reason",
                "phone_number",
                "user_name",
                "username_who_banned"
            ],
            "properties": {
                "ban_reason": {
                    "type": "string",
                    "minLength": 1,
                    "example": "Ban Reason"
                },
                "phone_number": {
                    "type": "string",
                    "maxLength": 15,
                    "minLength": 8,
                    "example": "79990004422"
                },
                "user_name": {
                    "type": "string",
                    "minLength": 1,
                    "example": "Test Testov"
                },
                "username_who_banned": {
                    "type": "string",
                    "minLength": 1,
                    "example": "SomeUser"
                }
            }
        },
        "dto.ResponseId": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                }
            }
        },
        "dto.Token": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6ImZ1Y2NjY2NjY2NjY2NjY2siLCJpYXQiOjE1MTYyMzkwMjJ9.0xdPqR3zyab1VTKuhaZnS_PzPT2Q5no2IasmlVek1rE"
                }
            }
        },
        "models.BlacklistData": {
            "type": "object",
            "required": [
                "ban_reason",
                "date_banned",
                "phone_number",
                "user_name",
                "username_who_banned"
            ],
            "properties": {
                "ban_reason": {
                    "type": "string",
                    "minLength": 1,
                    "example": "Ban Reason"
                },
                "date_banned": {
                    "type": "string",
                    "example": "2023-01-15 13:24:49"
                },
                "id": {
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "phone_number": {
                    "type": "string",
                    "maxLength": 15,
                    "minLength": 8,
                    "example": "79990004422"
                },
                "user_name": {
                    "type": "string",
                    "minLength": 1,
                    "example": "Test Testov"
                },
                "username_who_banned": {
                    "type": "string",
                    "minLength": 1,
                    "example": "SomeUser"
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Blacklist API",
	Description:      "This is a service that manages blacklist of users",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
